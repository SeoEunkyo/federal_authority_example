var oriento = require("oriento"),
    assert = require("assert"),
    qs = require("qs"),
	DBClass = require("../src").DBClass;


describe("Test DBClass", function() {

    if (!process.env.TEST_ORIENTDB) {
        it("needs TEST_ORIENTDB env var defined in order to test DBClass");
        
        return;
    }
    
    // Format: host=localhost&port=2424&username=root&password=root&db=test
    var TEST_CONN = qs.parse(process.env.TEST_ORIENTDB);
    var db = oriento(TEST_CONN).use(TEST_CONN.db);


    function Foo() {
        DBClass.apply(this, arguments);
    }
    
    DBClass.subclass(Foo);

    before(function(done) {
        db.class.get(Foo.name).then(function(clazz) {
            Foo.delete(db, done);
        }).catch(function(err) {
            Foo.create(db, done);
        });
    });

    after(function(done) {
        Foo.drop(db, done);
    });

    it("can be found", function(done) {
        Foo.insert(db, { id: "sdfgse34te"}, function(err, inserted) {
            if (err) {
                done(err);
            } else {
                Foo.find(db, { id: "sdfgse34te" }, function(err, found) {
                    if (!err) {
                        assert(1 == found.length);
                        assert(found[0]["@rid"]);
                        assert("sdfgse34te" == found[0].id);
                    }
                    done(err);
                });
            }
        });
    });

    it("can find all without criteria", function(done) {
        Foo.insert(db, { id: "456234qgaerg"}, function(err, inserted) {
            if (err) {
                done(err);
            } else {
                Foo.find(db, {}, function(err, found) {
                    if (!err) {
                        assert(found.length > 0);
                        Foo.find(db, function(err, found) {
                            if (!err) {
                                assert(found.length > 0);
                            }
                            done(err);
                        });
                    } else {
                        done(err);
                    }
                });
            }
        });
    });


    it("can be found by id", function(done) {
        Foo.insert(db, { id: "lbwizgweu"}, function(err, inserted) {
            if (err) {
                done(err);
            } else {
                Foo.findById(db, "lbwizgweu", function(err, found) {
                    if (!err) {
                        assert(found["@rid"]);
                        assert("lbwizgweu" == found.id);
                    }
                    done(err);
                });
            }
        });
    });

    it("can insert", function(done) {
        Foo.insert(db, { id: "34958z34qr4", val: 25 }, function(err, inserted) {
            if (!err) {
                assert(inserted["@rid"]);
                assert("34958z34qr4" == inserted.id);
                Foo.findById(db, "34958z34qr4", function(err, found) {
                   if (!err) {
                        assert(found["@rid"]);
                        assert("34958z34qr4" == found.id);
                       done();
                   } else {
                       done(err);
                   }
                });
            } else {
                done(err);
            }
        });
    });

    it("omits tagged fields on insert", function(done) {
        Foo.insert(db, { id: "rigq348fov3453", "#field": "tagged", val: 25 }, function(err, inserted) {
            if (!err) {
                assert(inserted["@rid"]);
                assert("rigq348fov3453" == inserted.id);
                Foo.findById(db, "rigq348fov3453", function(err, found) {
                    if (!err) {
                        assert(found["@rid"]);
                        assert("rigq348fov3453" == found.id);
                        assert(25 == found.val);
                        assert(!found["#field"]);
                        done();
                    } else {
                        done(err);
                    }
                });
            } else {
                done(err);
            }
        });
    });

    it("can save a loaded record", function(done) {
        Foo.insert(db, { id: "45645twezw4" }, function(err, record) {
            if (!err) {
                record.val = 25;
                record.save(db, function(err, saved) {
                    if (!err) {
                        Foo.findById(db, "45645twezw4", function(err, found) {
                            assert(found["@rid"]);
                            assert("45645twezw4" == found.id);
                            assert(25 == found.val);
                            done(err);
                        });
                    } else {
                        done(err);
                    }
                });
            } else {
                done(err);
            }
        });
    });

    it("can delete a record", function(done) {
        Foo.insert(db, { id: "3452456245" }, function(err, record) {
            if (!err) {
                Foo.delete(db, { id: "3452456245" }, function(err, total) {
                    if (!err) {
                        assert(1==total);
                        done();
                    } else {
                        done(err);
                    }
                });
            } else {
                done(err);
            }
        });
    });
});
